{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"React App Deployment on GitHub Pages Using GitHub Actions","text":""},{"location":"#getting-started","title":"Getting Started","text":"<p>To deploy a React application with routing on GitHub Pages using GitHub Actions, follow this step-by-step guide:</p>"},{"location":"#step-1-create-a-react-application-with-routing","title":"Step 1: Create a React Application with Routing","text":"<p>If you haven't already, create a React application with routing using a tool like Create React App or set up your own:</p> <pre><code>npx create-react-app my-app --template typescript\n</code></pre> <p>Afterward, add routing to your project.</p>"},{"location":"#step-2-set-up-a-github-repository","title":"Step 2: Set Up a GitHub Repository","text":"<p>Ensure that your React app is in a GitHub repository. If it's not, create a new repository on GitHub:</p> <ul> <li> <p>Navigate to the directory containing your project.</p> </li> <li> <p>Initialize a Git repository with this command:</p> </li> </ul> <pre><code>$ git init\n</code></pre> <ul> <li>Add all the relevant files:</li> </ul> <pre><code>$ git add .\n</code></pre> <ul> <li>Create a .gitignore file to specify the files you don't want to track:</li> </ul> <pre><code>$ git add .gitignore\n</code></pre> <ul> <li>Commit your changes with a descriptive message:</li> </ul> <pre><code>$ git commit -m \"Initial commit\"\n</code></pre> <ul> <li>Link your local repository to the remote GitHub repository:</li> </ul> <pre><code>$ git remote add origin git@github.com:username/new_repo\n</code></pre> <ul> <li>Push your code to the master branch of the remote repository:</li> </ul> <pre><code>$ git push -u origin master\n</code></pre>"},{"location":"#step-3-add-a-github-actions-workflow","title":"Step 3: Add a GitHub Actions Workflow","text":"<p>To create a GitHub Actions workflow file in your repository, you can use the GitHub UI or create it manually. For manual setup:</p> <ol> <li> <p>Place the workflow file in a folder named <code>.github/workflows</code> in your project's root directory.</p> </li> <li> <p>Name the file, for example, <code>deploy.yml</code>. The contents of this file should look like the following:</p> </li> </ol> <pre><code>name: Deploy to GitHub Pages\n\non:\n  push:\n    branches:\n      - main # Change this to the branch you want to deploy from\n\njobs:\n  build:\n    runs-on: ubuntu-latest # Change this to the configuration of the deployment environment. (If you are not sure, use a matrix to define environments)\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: 16 # Change this to the Node.js version of your project (If you are not sure, use a matrix to define versions)\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build\n        run: npm run build # Change this to your build script\n\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GH_TOKEN }}\n          publish_dir: ./build\n</code></pre> <p>This workflow does the following:</p> <ul> <li> <p>It runs when there's a push to the main branch. You can change the branch name if necessary.</p> </li> <li> <p>It checks out the repository's code.</p> </li> <li> <p>It sets up Node.js (adjust the version if needed).</p> </li> <li> <p>It installs your project's dependencies.</p> </li> <li> <p>It builds your project (modify the build command if necessary).</p> </li> <li> <p>It deploys the built files to the <code>gh-pages</code> branch, where GitHub Pages looks for content.</p> </li> </ul>"},{"location":"#step-4-add-changes-in-packagejson-file","title":"Step 4: Add Changes in package.json file","text":"<p>Add the following to your <code>package.json</code> before the dependencies section:</p> <pre><code>\"homepage\": \"https://github_username.github.io/repo_name\"\n</code></pre> <p>In the \"scripts\" section, add:</p> <pre><code>\"predeploy\": \"npm run build\",\n\"deploy\": \"gh-pages -d build\"\n</code></pre> <p>Before the \"start\" script.</p> <p>To prevent errors caused by GitHub treating warnings as errors due to <code>process.env.CI = true</code>, add this line to your build script:</p> <pre><code>\"build\": \"CI=false &amp;&amp; react-scripts build\"\n</code></pre>"},{"location":"#step-5-create-github-secrets","title":"Step 5: Create GitHub Secrets","text":"<p>To store your GitHub token, create a GitHub secret. Go to your repository on GitHub, navigate to \"Settings\" &gt; \"Secrets,\" and create a new secret named <code>GITHUB_TOKEN</code>. The workflow will use this token to authenticate and push changes to the <code>gh-pages</code> branch.</p> <p>For <code>GITHUB_TOKEN</code>, you will need to generate a Personal Access Token (PAT) by navigating to \"Settings\" &gt; \"Developer Settings\" &gt; \"Personal access tokens\" &gt; \"Generate new token.\" After authorization, GitHub will provide you with a token. Use this token for creating <code>GITHUB_TOKEN</code>. If GitHub doesn't allow using the name <code>GITHUB_TOKEN</code>, use <code>GH_TOKEN</code> or another suitable name.</p>"},{"location":"#step-6-commit-and-push-the-workflow-file","title":"Step 6: Commit and Push the Workflow File","text":"<p>Commit the <code>deploy.yml</code> file and push it to your repository on the <code>main</code> branch.</p>"},{"location":"#step-7-github-actions-deployment","title":"Step 7: GitHub Actions Deployment","text":"<p>GitHub Actions will automatically run the workflow when you push to the <code>main</code> branch. You can monitor the workflow's progress on your repository's \"Actions\" tab.</p> <p>Once the workflow is successful, your React application will be deployed to GitHub Pages.</p>"},{"location":"#step-8-configure-github-pages","title":"Step 8: Configure GitHub Pages","text":"<p>Go to your repository's settings on GitHub, scroll down to the GitHub Pages section, and set the branch to <code>gh-pages</code>. Your React app should now be accessible at the GitHub Pages URL provided.</p> <p>That's it! Your React application with routing is now deployed on GitHub Pages using GitHub Actions. Be sure to adjust the workflow and settings according to your specific project structure and requirements.</p>"},{"location":"#step-9-after-deploying-to-github-pages","title":"Step 9: After Deploying to GitHub Pages","text":"<p>After deployment, you may encounter some issues, such as:</p> <ul> <li>When you reload the app, it displays a \"404 Not Found\" error. To handle this error, add a 404.html file with the following content:</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Your App Title&lt;/title&gt;\n    &lt;script&gt;\n      location = '/'; // Redirect to the root URL\n    &lt;/script&gt;\n  &lt;/head&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>You cannot route through direct changes in the URL; routing only works through relative paths.</li> </ul>"},{"location":"#references","title":"References:","text":"<ul> <li>https://www.youtube.com/watch?v=5I37iVCDUTU</li> </ul>"},{"location":"#github-repo","title":"GitHub Repo:","text":"<ul> <li>https://docs.github.com/en/actions/using-workflows</li> <li>https://github.com/milosrancic/reactjs-website</li> </ul>"},{"location":"custom/","title":"React App Deployment On GitHub Pages Using GitHub Actions","text":""},{"location":"custom/#getting-started","title":"Getting Started","text":"<p>To deploy a React application with routing on GitHub Pages using GitHub Actions, you'll need to create a workflow that builds your app and publishes it to a GitHub Pages branch. Here's a step-by-step guide:</p>"},{"location":"custom/#step-1-create-a-react-application-with-routing","title":"Step 1: Create a React Application with Routing","text":"<p>If you haven't already, create a React application with routing using a tool like Create React App or set up your own.</p> <pre><code>npx create-react-app my-app --template typescript\n</code></pre> <p>After this add routing to your project.</p>"},{"location":"custom/#step-2-set-up-github-repository","title":"Step 2: Set Up GitHub Repository","text":"<p>Ensure that your React app is in a GitHub repository. If it's not, create a new repository on GitHub.</p>"},{"location":"custom/#navigate-to-the-directory-containing-your-project","title":"Navigate to the directory containing your project.","text":"<p>Initialize a Git repository with the following command:</p> <pre><code> $ git init\n</code></pre> <p>Add all the relevant files with command:</p> <pre><code>$ git add .\n</code></pre> <p>Create a .gitignore file right away to specify the files you don't want to track. Add it to Git with</p> <pre><code>$ git add .gitignore.\n</code></pre> <p>Commit your changes with a descriptive message:</p> <pre><code>$ git commit -m \"Initial commit\".\n</code></pre> <p>Link your local repository to the remote GitHub repository with:</p> <pre><code>$ git remote add origin git@github.com:username/new_repo.\n</code></pre> <p>Push your code to the master branch of the remote repository with:</p> <pre><code>$ git push -u origin master.\n</code></pre>"},{"location":"custom/#_1","title":"","text":""},{"location":"custom/#step-3-add-github-actions-workflow","title":"Step 3: Add GitHub Actions Workflow","text":"<p>To create a GitHub Actions workflow file in your repository, you can use the GitHub UI or create it manually. For manually, Place workflow file in a folder named <code>.github/workflows</code> in your project's root directory. Name the file, for example, deploy.yml. The contents of this file should look like the following:</p> <pre><code>name: Deploy to GitHub Pages\n\non:\n  push:\n    branches:\n      - main # Change this to the branch you want to deploy from\n\njobs:\n  build:\n    runs-on: ubuntu-latest # Change this to configuration of the deployment enviornment. (If you are not sure use matrix for defining env)\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: 16 # Change this to node version of your project(If you are not sure use matrix for defining version)\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Build\n      run: npm run build # Change this to your build script\n\n    - name: Deploy to GitHub Pages\n      uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GH_TOKEN }}\n          publish_dir: ./build\n\n</code></pre> <p> This workflow does the following:</p> <ul> <li> <p>It runs when there's a push to the main branch. You can change the branch name if necessary.</p> </li> <li> <p>It checks out the repository's code.</p> </li> <li> <p>It sets up Node.js (adjust the version if needed).</p> </li> <li> <p>It installs your project's dependencies.</p> </li> <li> <p>It builds your project (modify the build command if necessary).</p> </li> <li> <p>It deploys the built files to the <code>gh-pages</code> branch, which is where GitHub Pages looks for content.</p> </li> </ul>"},{"location":"custom/#step-4-add-changes-in-packagejson-file","title":"Step 4: Add Changes in package.json file","text":"<p>Before your dependencies in package.json, add the following:</p> <pre><code>\"homepage\": \"https://github_username.github.io/repo_name\",\n</code></pre> <p>In the scripts section, add:</p> <pre><code>\"predeploy\": \"npm run build\",\n\"deploy\": \"gh-pages -d build\",\n</code></pre> <p>Before the \"start\" script.</p> <p>Now when you run your workflow you might get some errors, because Github Treats warnings as errors because <code>process.env.CI = true.</code> To avoid this happening: Add this in your script build:</p> <pre><code>\"build\": \"CI=false &amp;&amp; react-scripts build\",\n</code></pre>"},{"location":"custom/#step-5-create-github-secrets","title":"Step 5: Create GitHub Secrets","text":"<p>You'll need to create a GitHub secret to store your GitHub token. Go to your repository on GitHub, navigate to \"Settings\" &gt; \"Secrets\" and create a new secret named <code>GITHUB_TOKEN</code>. The workflow will use this token to authenticate and push changes to the <code>gh-pages</code> branch. For <code>GITHUB_TOKEN</code> you will need to generate a Personal Access Token (PAT) by navigating to \"Settings\" &gt; \"Developer Setting\" &gt; \"Personal access tokens\" &gt; \"Generate new token\". After authorization, GitHub will provide you with a token. Use this token for creating <code>GITHUB_TOKEN</code>. If GitHub doesn't allow using the name <code>GITHUB_TOKEN</code>, use <code>GH_TOKEN</code> or another suitable name.</p>"},{"location":"custom/#step-6-commit-and-push-workflow-file","title":"Step 6: Commit and Push Workflow File","text":"<p>Commit the <code>deploy.yml</code> file and push it to your repository on the <code>main</code> branch.</p>"},{"location":"custom/#step-7-github-actions-deployment","title":"Step 7: GitHub Actions Deployment","text":"<p>GitHub Actions will automatically run the workflow when you push to the <code>main</code> branch. You can monitor the workflow's progress on your repository's \"Actions\" tab.</p> <p>Once the workflow is successful, your React application will be deployed to GitHub Pages.</p>"},{"location":"custom/#step-8-configure-github-pages","title":"Step 8: Configure GitHub Pages","text":"<p>Go to your repository's settings on GitHub, scroll down to the GitHub Pages section, and set the branch to <code>gh-pages</code>. Your React app should now be accessible at the GitHub Pages URL provided.</p> <p>That's it! Your React application with routing is now deployed on GitHub Pages using GitHub Actions. Make sure to adjust the workflow and settings according to your specific project structure and requirements.</p>"},{"location":"custom/#step-9-after-deploying-to-github-pages","title":"Step 9: After Deploying to GitHub pages","text":"<p>After deployment, you may encounter some issues, such as:</p> <ul> <li>When you reload the app, it displays a \"404 Not Found\" error. To handle this error, add a 404.html file with the following content:</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Your App Title&lt;/title&gt;\n    &lt;script&gt;\n      location = '/'; // Redirect to the root URL\n    &lt;/script&gt;\n  &lt;/head&gt;\n&lt;/html&gt;\n\n</code></pre> <ul> <li>You cannot route through direct change in URL; routing only works through relative paths.</li> </ul>"},{"location":"custom/#references","title":"References:","text":"<p>https://www.youtube.com/watch?v=5I37iVCDUTU</p>"},{"location":"custom/#github-repo","title":"GitHub Repo:","text":"<p>https://docs.github.com/en/actions/using-workflows https://github.com/milosrancic/reactjs-website</p>"},{"location":"custom/#references_1","title":"References:","text":"<ul> <li>Video Tutorial</li> </ul>"},{"location":"custom/#github-repo_1","title":"GitHub Repo:","text":"<ul> <li>GitHub Actions Documentation</li> <li>GitHub Repository</li> </ul> <p>You can replace <code>\"https://github_username.github.io/repo_name\"</code> with your actual GitHub Pages URL, and make any other necessary customizations.</p>"}]}